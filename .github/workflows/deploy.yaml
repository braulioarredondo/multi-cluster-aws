name: Test MultiK8s
on:
  push:
    branches:
      - master

env:
  SHA: $(git rev-parse HEAD)

jobs:
  Multi-cluster-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      #- name: Build Images
      #  run:  |-
      #    docker build -t braulioarredondo/multi-client-k8s:latest -t braulioarredondo/multi-client-k8s:${{ env.SHA }} -f ./client/Dockerfile ./client
      #    docker build -t braulioarredondo/multi-server-k8s:latest -t braulioarredondo/multi-server-k8s:${{ env.SHA }} -f ./server/Dockerfile ./server
      #    docker build -t braulioarredondo/multi-worker-k8s:latest -t braulioarredondo/multi-worker-k8s:${{ env.SHA }} -f ./worker/Dockerfile ./worker

      - name: Test
        run: |-
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t braulioarredondo/react-test -f ./client/Dockerfile.dev ./client
          docker run -e CI=true braulioarredondo/react-test npm test

      #- name: Push
      #  run: |-
      #    docker push braulioarredondo/multi-client-k8s:latest
      #    docker push braulioarredondo/multi-server-k8s:latest
      #    docker push braulioarredondo/multi-worker-k8s:latest

      #    docker push braulioarredondo/multi-client-k8s:${{ env.SHA }}
      #    docker push braulioarredondo/multi-server-k8s:${{ env.SHA }}
      #    docker push braulioarredondo/multi-worker-k8s:${{ env.SHA }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SCRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS CloudFormation
        run: |-
          aws cloudformation create-stack --stack-name multi-cluster \
          --template-body file://multi-cluster.yaml \
          --parameters ParameterKey=EKSClusterName,ParameterValue=multi-cluster \
          --capabilities CAPABILITY_NAMED_IAM

          aws cloudformation wait stack-create-complete --stack-name multi-cluster
          aws eks update-kubeconfig --region us-east-1 --name multi-cluster
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl utils associate-iam-oidc-provider --region=us-east-1 --cluster=multi-cluster --approve
          eksctl create iamserviceaccount \
          --name ebs-csi-controller-sa \
          --namespace kube-system \
          --cluster multi-cluster \
          --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
          --approve \
          --role-only \
          --role-name AmazonEKS_EBS_CSI_DriverRole
          eksctl create addon --name aws-ebs-csi-driver --cluster multi-cluster --service-account-role-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/AmazonEKS_EBS_CSI_DriverRole --force

          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm install my-release ingress-nginx/ingress-nginx
          kubectl create secret generic pgpassword --from-literal PGPASSWORD=${{ secrets.PGPASSWORD }}

          sleep 60s

          kubectl apply -f ./k8s
          
          sleep 180s

          kubectl get service my-release-ingress-nginx-controller